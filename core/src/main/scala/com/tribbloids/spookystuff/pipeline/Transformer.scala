package com.tribbloids.spookystuff.pipeline

import java.util.UUID

import com.tribbloids.spookystuff.sparkbinding.PageRowRDD
import com.tribbloids.spookystuff.{PipelineException, SpookyContext}
import org.apache.spark.ml.param.{ParamPair, Param, ParamMap, Params}

import scala.language.dynamics

/**
 * Created by peng on 25/09/15.
 */
private[pipeline] trait SpookyTransformerLike extends Params with Serializable {

  def transform(dataset: PageRowRDD): PageRowRDD

  def copy(extra: ParamMap): SpookyTransformerLike = this.defaultCopy(extra)

  def +> (another: SpookyTransformer): TransformerChain

  def test(spooky: SpookyContext): Unit
}

trait SpookyTransformer extends SpookyTransformerLike with Dynamic {

  override def copy(extra: ParamMap): SpookyTransformer = this.defaultCopy(extra)

  def +> (another: SpookyTransformer): TransformerChain = new TransformerChain(Seq(this)) +> another

  /*
  This dynamic function automatically add a setter to any Param-typed property
   */
  def applyDynamic(methodName: String)(args: Any*): this.type = {
    assert(args.length == 1)
    val arg = args.head

    if (methodName.startsWith("set")) {
      val fieldName = methodName.stripPrefix("set")
      val field = this.getClass.getMethod(fieldName) //this gets all the getter generated by Scala
      val value = field.invoke(this).asInstanceOf[Param[Any]]

      set(value, arg)
      this
    }
    else throw new PipelineException(s"setter $methodName doesn't exist")
  }

  //example value of parameters used for testing
  val exampleParamMap: ParamMap = ParamMap.empty

  protected final def setExample(paramPairs: ParamPair[_]*): this.type = {
    paramPairs.foreach { p =>
      setExample(p.param.asInstanceOf[Param[Any]], p.value)
    }
    this
  }

  protected final def setExample[T](param: Param[T], value: T): this.type = {
    exampleParamMap.put(param -> value)
    this
  }

  //condition that has to be met to pass the test
  val conditionMap: ParamMap = ParamMap.empty
}

class TransformerChain(
                        self: Seq[SpookyTransformer],
                        override val uid: String =
                        classOf[TransformerChain].getCanonicalName + "_" + UUID.randomUUID().toString
                        ) extends SpookyTransformerLike {

  //this is mandatory for Params.defaultCopy()
  def this(uid: String) = this(Nil, uid)

  override def transform(dataset: PageRowRDD): PageRowRDD = self.foldLeft(dataset) {
    (rdd, transformer) =>
      transformer.transform(rdd)
  }

  override def copy(extra: ParamMap): TransformerChain = new TransformerChain(
    self = this
      .self
      .map(_.copy(extra)),
    uid = this.uid
  )

  def +> (another: SpookyTransformer): TransformerChain = new TransformerChain(
    this.self :+ another,
    uid = this.uid
  )

  override def test(spooky: SpookyContext): Unit = self.foreach(_.test(spooky))
}